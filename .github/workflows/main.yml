name: Publish Docker image

on:
  push:
    branches: ['main']

jobs:
  push_to_registry:
    name: Push Docker image to Docker Hub

    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PAT }}

       # name: Build and push images
        #id: push_images
       # run: |
        #  docker build -t alonecat/photo-stock-nginx:latest -f nginx/Dockerfile ./nginx
        #  docker push alonecat/photo-stock-nginx:latest
        #  docker build -t alonecat/photo-stock-frontend:latest -f Dockerfile .
        #  docker push alonecat/photo-stock-frontend:latest


      - name: Add SSH key to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Setup SSH key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Test SSH connection with scp
        run: |
            echo "This is a test file" > testfile.txt
            scp -o StrictHostKeyChecking=no -i ${{ secrets.SSH_PRIVATE_KEY }} testfile.txt ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:/tmp/
            ssh -o StrictHostKeyChecking=no -i ${{ secrets.SSH_PRIVATE_KEY }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} ls /tmp/testfile.txt

      - name: Create Docker context
       # if: steps.push_images.conclusion == 'success'
        run: |
          echo "Creating Docker context..."
          docker context create remote \
            --docker "host=ssh://${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} --ssh-options='-o StrictHostKeyChecking=no'" \
            --description "Remote vps Docker server"
      - name: Debug Docker Compose files
        #if: steps.push_images.conclusion == 'success'
        run: |
          echo "Fetching Docker Compose files..."
          docker context use remote
          docker-compose config
          #docker-compose -f docker-compose.prod.yml -f docker-compose.common.yml config
          #docker-compose -f docker-compose.prod.yml -f docker-compose.common.yml version

      - name: Run Docker Compose commands
      #  if: steps.push_images.conclusion == 'success'
        run: |
          docker context use remote
          docker-compose up
      #    docker-compose -f docker-compose.prod.yml -f docker-compose.common.yml down
       #   docker-compose -f docker-compose.prod.yml -f docker-compose.common.yml pull
        #  docker-compose -f docker-compose.prod.yml -f docker-compose.common.yml up -d
